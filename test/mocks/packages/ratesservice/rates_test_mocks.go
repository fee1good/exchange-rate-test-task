// Code generated by MockGen. DO NOT EDIT.
// Source: ../../internal/services/rates/rates.go

// Package ratestestmocks is a generated GoMock package.
package ratestestmocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/fee1good/exchange-rate-test-task/internal/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockCryptoCompareAPI is a mock of CryptoCompareAPI interface.
type MockCryptoCompareAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoCompareAPIMockRecorder
}

// MockCryptoCompareAPIMockRecorder is the mock recorder for MockCryptoCompareAPI.
type MockCryptoCompareAPIMockRecorder struct {
	mock *MockCryptoCompareAPI
}

// NewMockCryptoCompareAPI creates a new mock instance.
func NewMockCryptoCompareAPI(ctrl *gomock.Controller) *MockCryptoCompareAPI {
	mock := &MockCryptoCompareAPI{ctrl: ctrl}
	mock.recorder = &MockCryptoCompareAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptoCompareAPI) EXPECT() *MockCryptoCompareAPIMockRecorder {
	return m.recorder
}

// GetPairsRate mocks base method.
func (m *MockCryptoCompareAPI) GetPairsRate(ctx context.Context, cryptoSymbols, fiatSymbols []string) (*entities.PairsRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPairsRate", ctx, cryptoSymbols, fiatSymbols)
	ret0, _ := ret[0].(*entities.PairsRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPairsRate indicates an expected call of GetPairsRate.
func (mr *MockCryptoCompareAPIMockRecorder) GetPairsRate(ctx, cryptoSymbols, fiatSymbols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPairsRate", reflect.TypeOf((*MockCryptoCompareAPI)(nil).GetPairsRate), ctx, cryptoSymbols, fiatSymbols)
}

// MockRateRepository is a mock of RateRepository interface.
type MockRateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRateRepositoryMockRecorder
}

// MockRateRepositoryMockRecorder is the mock recorder for MockRateRepository.
type MockRateRepositoryMockRecorder struct {
	mock *MockRateRepository
}

// NewMockRateRepository creates a new mock instance.
func NewMockRateRepository(ctrl *gomock.Controller) *MockRateRepository {
	mock := &MockRateRepository{ctrl: ctrl}
	mock.recorder = &MockRateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateRepository) EXPECT() *MockRateRepositoryMockRecorder {
	return m.recorder
}

// GetPairs mocks base method.
func (m *MockRateRepository) GetPairs(ctx context.Context, cryptoSymbols, fiatSymbols []string) ([]entities.Pair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPairs", ctx, cryptoSymbols, fiatSymbols)
	ret0, _ := ret[0].([]entities.Pair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPairs indicates an expected call of GetPairs.
func (mr *MockRateRepositoryMockRecorder) GetPairs(ctx, cryptoSymbols, fiatSymbols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPairs", reflect.TypeOf((*MockRateRepository)(nil).GetPairs), ctx, cryptoSymbols, fiatSymbols)
}
